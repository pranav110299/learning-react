https://github.com/pranav110299/learning-react.git
https://www.codecademy.com/courses/react-101/lessons/react-jsx-intro/exercises/reactdom-render-variable

1] Passing a Variable to ReactDOM.render() :
eg =
import React from 'react';
import ReactDOM from 'react-dom';

// Write code here:
const myList = (
  <ul>
  <li>batting</li>
  <li>bowling</li>
  </ul>
);
ReactDOM.render(myList,document.getElementById('app'));

2] Self-Closing Tags : When you write a self-closing tag in HTML, it is optional to include a forward-slash immediately before the final angle-bracket. But!

In JSX, you have to include the slash. If you write a self-closing tag in JSX and forget the slash, you will raise an error.
eg = const profile = (
  <div>
    <h1>I AM JENKINS</h1>
    <img src="images/jenkins.png" />
    <article>
      I LIKE TO SIT
      <br />
      JENKINS IS MY NAME
      <br />
      THANKS HA LOT
    </article>
  </div>
);

3] Curly braces in JSX : Any code in between the tags of a JSX element will be read as JSX, not as regular JavaScript! JSX doesn’t add numbers - it reads them as text, just like HTML.

You need a way to write code that says, “Even though I am located in between JSX tags, treat me like ordinary JavaScript and not like JSX.”

You can do this by wrapping your code in curly braces.
eg = 
import React from 'react';
import ReactDOM from 'react-dom';

// Write code here:
ReactDOM.render(
  <h1>{2 + 3}</h1>,
  document.getElementById('app')
);

4] Event Listeners in JSX : JSX elements can have event listeners, just like HTML elements can. Programming in React means constantly working with event listeners.
An event listener attribute’s name should be something like onClick or onMouseOver: the word on, plus the type of event that you’re listening for. 
eg =
import React from 'react';
import ReactDOM from 'react-dom';

function makeDoggy(e) {
  // Call this extremely useful function on an <img>.
  // The <img> will become a picture of a doggy.
  e.target.setAttribute('src', 'https://content.codecademy.com/courses/React/react_photo-puppy.jpeg');
  e.target.setAttribute('alt', 'doggy');
}

const kitty = (
	<img 
		src="https://content.codecademy.com/courses/React/react_photo-kitty.jpg" 
		alt="kitty"
    onClick={makeDoggy} />
);

ReactDOM.render(kitty, document.getElementById('app'));

5] JSX Conditionals: If Statements That Don't Work -
Here’s a rule that you need to know: you can not inject an if statement into a JSX expression. 
The reason why has to do with the way that JSX is compiled. 

6] JSX Conditionals: If Statements That Do Work : How can you write a conditional, if you can’t inject an if statement into JSX ? Well, one option is to write an if statement, and not inject it into JSX.
eg = 
import React from 'react';
import ReactDOM from 'react-dom';

function coinToss() {
  // This function will randomly return either 'heads' or 'tails'.
  return Math.random() < 0.5 ? 'heads' : 'tails';
}

const pics = {
  kitty: 'https://content.codecademy.com/courses/React/react_photo-kitty.jpg',
  doggy: 'https://content.codecademy.com/courses/React/react_photo-puppy.jpeg'
};
let img;

// if/else statement begins here:
if (coinToss() === 'heads') {
  img = <img src={pics.kitty} />
  
} else {
  img = <img src={pics.doggy} />
}
ReactDOM.render(img, document.getElementById('app'));

7] JSX Conditionals: The Ternary Operator : The ternary operator works the same way in React as it does in regular JavaScript. 
eg =
import React from 'react';
import ReactDOM from 'react-dom';

function coinToss () {
  // Randomly return either 'heads' or 'tails'.
  return Math.random() < 0.5 ? 'heads' : 'tails';
}

const pics = {
  kitty: 'https://content.codecademy.com/courses/React/react_photo-kitty.jpg',
  doggy: 'https://content.codecademy.com/courses/React/react_photo-puppy.jpeg'
};

const img = <img src={pics[coinToss() === 'heads' ? 'kitty' : 'doggy']} />;

ReactDOM.render(
	img, 
	document.getElementById('app')
);

8] JSX Conditionals: && - 
Like the ternary operator, && is not React-specific, but it shows up in React surprisingly often. && works best in conditionals that will sometimes do an action, but other times do nothing at all.
If the expression on the left of the && evaluates as true, then the JSX on the right of the && will be rendered. If the first expression is false, however, then the JSX to the right of the && will be ignored and not rendered.
eg =
import React from 'react';
import ReactDOM from 'react-dom';

// judgmental will be true half the time.
const judgmental = Math.random() < 0.5;

const favoriteFoods = (
  <div>
    <h1>My Favorite Foods</h1>
    <ul>
      <li>Sushi Burrito</li>
      <li>Rhubarb Pie</li>
      {!judgmental && <li>Nacho Cheez Straight Out The Jar</li>}
      <li>Broiled Grapefruit</li>
    </ul>
  </div>
);

ReactDOM.render(
	favoriteFoods, 
	document.getElementById('app')
);
